AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  env:
    Type: String
  authRoleName:
    Type: String
  unauthRoleName:
    Type: String
  authRoleArn:
    Type: String
  unauthRoleArn:
    Type: String
  identityPoolName:
    Type: String
  allowUnauthenticatedIdentities:
    Type: String
  openIdLambdaRoleName:
    Type: String
  resourceNameTruncated:
    Type: String
  userPoolName:
    Type: String
  autoVerifiedAttributes:
    Type: CommaDelimitedList
  mfaConfiguration:
    Type: String
  mfaTypes:
    Type: CommaDelimitedList
  smsAuthenticationMessage:
    Type: String
  smsVerificationMessage:
    Type: String
  emailVerificationSubject:
    Type: String
  emailVerificationMessage:
    Type: String
  defaultPasswordPolicy:
    Type: String
  passwordPolicyMinLength:
    Type: Number
  passwordPolicyCharacters:
    Type: CommaDelimitedList
  requiredAttributes:
    Type: CommaDelimitedList
  userpoolClientName:
    Type: String
  userpoolClientGenerateSecret:
    Type: String
  userpoolClientRefreshTokenValidity:
    Type: Number
  userpoolClientWriteAttributes:
    Type: CommaDelimitedList
  userpoolClientReadAttributes:
    Type: CommaDelimitedList
  mfaLambdaRole:
    Type: String
  userpoolClientLambdaRole:
    Type: String
  userpoolClientSetAttributes:
    Type: String
  thirdPartyAuth:
    Type: String
  lambdaLogPolicy:
    Type: String
  openIdRolePolicy:
    Type: String
  openIdLambdaIAMPolicy:
    Type: String
  openIdLogPolicy:
    Type: String
  roleName:
    Type: String
  roleExternalId:
    Type: String
  policyName:
    Type: String
  mfaLambdaLogPolicy:
    Type: String
  mfaPassRolePolicy:
    Type: String
  mfaLambdaIAMPolicy:
    Type: String
  userpoolClientLogPolicy:
    Type: String
  userpoolClientLambdaPolicy:
    Type: String
  useDefault:
    Type: String
  authSelections:
    Type: String
  resourceName:
    Type: String
  authProviders:
    Type: CommaDelimitedList
  selectedParties:
    Type: String
  facebookAppId:
    Type: String
  googleClientId:
    Type: String
  amazonAppId:
    Type: String
Conditions:
  ShouldNotCreateEnvResources:
    Fn::Equals:
      - Ref: env
      - NONE
Resources:
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - cognit79c0e771_sns-role
          - Fn::Join:
              - ''
              - - cognit79c0e771_sns-role
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: cognit79c0e771_role_external_id
      Policies:
        - PolicyName: cognit79c0e771-sns-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: '*'
  UserPool:
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: userPoolName
          - Fn::Join:
              - ''
              - - Ref: userPoolName
                - '-'
                - Ref: env
      Schema:
        - Name: email
          Required: 'true'
          Mutable: 'true'
      AutoVerifiedAttributes:
        Ref: autoVerifiedAttributes
      EmailVerificationMessage:
        Ref: emailVerificationMessage
      EmailVerificationSubject:
        Ref: emailVerificationSubject
      Policies:
        PasswordPolicy:
          MinimumLength:
            Ref: passwordPolicyMinLength
          RequireLowercase: 'true'
          RequireNumbers: 'true'
          RequireSymbols: 'true'
          RequireUppercase: 'true'
      MfaConfiguration:
        Ref: mfaConfiguration
      SmsVerificationMessage:
        Ref: smsVerificationMessage
      SmsConfiguration:
        SnsCallerArn:
          Fn::GetAtt:
            - SNSRole
            - Arn
        ExternalId: cognit79c0e771_role_external_id
    DependsOn: SNSRole
  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognitodevtmh_app_clientWeb
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      UserPoolId:
        Ref: UserPool
    DependsOn: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Ref: userpoolClientName
      GenerateSecret:
        Ref: userpoolClientGenerateSecret
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      UserPoolId:
        Ref: UserPool
    DependsOn: UserPool
  UserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: userpoolClientLambdaRole
          - Fn::Join:
              - ''
              - - Ref: userpoolClientLambdaRole
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
    DependsOn: UserPoolClient
  UserPoolClientLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - const identity = new aws.CognitoIdentityServiceProvider();
              - exports.handler = (event, context, callback) => {
              - ' if (event.RequestType == ''Delete'') { '
              - '   response.send(event, context, response.SUCCESS, {})'
              - ' }'
              - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
              - '   const params = {'
              - '     ClientId: event.ResourceProperties.clientId,'
              - '     UserPoolId: event.ResourceProperties.userpoolId'
              - '   };'
              - '   identity.describeUserPoolClient(params).promise()'
              - '     .then((res) => {'
              - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'
              - '     })'
              - '     .catch((err) => {'
              - '       response.send(event, context, response.FAILED, {err});'
              - '     });'
              - ' }'
              - '};'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
    DependsOn: UserPoolClientRole
  UserPoolClientLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cognit79c0e771_userpoolclient_lambda_iam_policy
      Roles:
        - Fn::If:
            - ShouldNotCreateEnvResources
            - Ref: userpoolClientLambdaRole
            - Fn::Join:
                - ''
                - - Ref: userpoolClientLambdaRole
                  - '-'
                  - Ref: env
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cognit79c0e771_userpoolclient_lambda_log_policy
      Roles:
        - Fn::If:
            - ShouldNotCreateEnvResources
            - Ref: userpoolClientLambdaRole
            - Fn::Join:
                - ''
                - - Ref: userpoolClientLambdaRole
                  - '-'
                  - Ref: env
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: UserPoolClientLambda
    DependsOn: UserPoolClientLambdaPolicy
  UserPoolClientInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - UserPoolClientLambda
          - Arn
      clientId:
        Ref: UserPoolClient
      userpoolId:
        Ref: UserPool
    DependsOn: UserPoolClientLogPolicy
  MFALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - Ref: mfaLambdaRole
          - Fn::Join:
              - ''
              - - Ref: mfaLambdaRole
                - '-'
                - Ref: env
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: cognit79c0e771_totp_pass_role_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::If:
                    - ShouldNotCreateEnvResources
                    - arn:aws:iam:::role/cognitodevtmh_totp_lambda_role
                    - Fn::Join:
                        - ''
                        - - arn:aws:iam:::role/cognitodevtmh_totp_lambda_role
                          - '-'
                          - Ref: env
  MFALambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - const response = require('cfn-response');
              - const aws = require('aws-sdk');
              - const identity = new aws.CognitoIdentityServiceProvider();
              - exports.handler = (event, context, callback) => {
              - ' if (event.RequestType == ''Delete'') { '
              - '   response.send(event, context, response.SUCCESS, {})'
              - ' }'
              - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
              - '   let totpParams = {};'
              - '   try {'
              - '     totpParams = {'
              - '       UserPoolId: event.ResourceProperties.userPoolId,'
              - '       MfaConfiguration: event.ResourceProperties.mfaConfiguration,'
              - '       SmsMfaConfiguration: {'
              - '         SmsAuthenticationMessage: event.ResourceProperties.smsAuthenticationMessage,'
              - '         SmsConfiguration: {'
              - '           SnsCallerArn: event.ResourceProperties.smsConfigCaller,'
              - '           ExternalId: event.ResourceProperties.smsConfigExternalId'
              - '         }'
              - '       },'
              - '       SoftwareTokenMfaConfiguration: {Enabled: event.ResourceProperties.totpEnabled.toLowerCase() === ''true'' ? true : false}'
              - '     };'
              - '   } catch(e) {'
              - '     response.send(event, context, response.FAILED, {e});'
              - '   };'
              - '   identity.setUserPoolMfaConfig(totpParams).promise()'
              - '     .then((res) => {'
              - '       response.send(event, context, response.SUCCESS, {res});'
              - '     })'
              - '     .catch((err) => {'
              - '       response.send(event, context, response.FAILED, {err});'
              - '     });'
              - ' }'
              - '};'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: '300'
      Role:
        Fn::GetAtt:
          - MFALambdaRole
          - Arn
    DependsOn: MFALambdaRole
  MFALambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cognit79c0e771_totp_lambda_iam_policy
      Roles:
        - Fn::If:
            - ShouldNotCreateEnvResources
            - Ref: mfaLambdaRole
            - Fn::Join:
                - ''
                - - Ref: mfaLambdaRole
                  - '-'
                  - Ref: env
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:SetUserPoolMfaConfig
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
    DependsOn: MFALambda
  MFALogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cognit79c0e771_totp_lambda_log_policy
      Roles:
        - Fn::If:
            - ShouldNotCreateEnvResources
            - Ref: mfaLambdaRole
            - Fn::Join:
                - ''
                - - Ref: mfaLambdaRole
                  - '-'
                  - Ref: env
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - >-
                  arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: MFALambda
    DependsOn: MFALambdaPolicy
  MFALambdaInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - MFALambda
          - Arn
      userPoolId:
        Ref: UserPool
      mfaConfiguration:
        Ref: mfaConfiguration
      totpEnabled: 'true'
      smsConfigCaller:
        Fn::GetAtt:
          - SNSRole
          - Arn
      smsAuthenticationMessage:
        Ref: smsAuthenticationMessage
      smsConfigExternalId: cognit79c0e771_role_external_id
    DependsOn: MFALogPolicy
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - tmhident
          - Fn::Join:
              - ''
              - - tmhident
                - __
                - Ref: env
      CognitoIdentityProviders:
        - ClientId:
            Ref: UserPoolClient
          ProviderName:
            Fn::Sub:
              - cognito-idp.${region}.amazonaws.com/${client}
              - region:
                  Ref: AWS::Region
                client:
                  Ref: UserPool
        - ClientId:
            Ref: UserPoolClientWeb
          ProviderName:
            Fn::Sub:
              - cognito-idp.${region}.amazonaws.com/${client}
              - region:
                  Ref: AWS::Region
                client:
                  Ref: UserPool
      SupportedLoginProviders:
        graph.facebook.com:
          Ref: facebookAppId
        accounts.google.com:
          Ref: googleClientId
        www.amazon.com:
          Ref: amazonAppId
      AllowUnauthenticatedIdentities:
        Ref: allowUnauthenticatedIdentities
    DependsOn: UserPoolClientInputs
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        unauthenticated:
          Ref: unauthRoleArn
        authenticated:
          Ref: authRoleArn
    DependsOn: IdentityPool
Outputs:
  IdentityPoolId:
    Value:
      Ref: IdentityPool
    Description: Id for the identity pool
  IdentityPoolName:
    Value:
      Fn::GetAtt:
        - IdentityPool
        - Name
  UserPoolId:
    Value:
      Ref: UserPool
    Description: Id for the user pool
  UserPoolName:
    Value:
      Ref: userPoolName
  AppClientIDWeb:
    Value:
      Ref: UserPoolClientWeb
    Description: The user pool app client id for web
  AppClientID:
    Value:
      Ref: UserPoolClient
    Description: The user pool app client id
  AppClientSecret:
    Value:
      Fn::GetAtt:
        - UserPoolClientInputs
        - appSecret
  CreatedSNSRole:
    Value:
      Fn::GetAtt:
        - SNSRole
        - Arn
    Description: role arn
  GoogleWebClient:
    Value:
      Ref: googleClientId
  FacebookWebClient:
    Value:
      Ref: facebookAppId
  AmazonWebClient:
    Value:
      Ref: amazonAppId
